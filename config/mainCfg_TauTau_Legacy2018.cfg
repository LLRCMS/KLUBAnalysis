[general]

lumi = 59970 # pb^-1 CMS2018LUMI PASSING ANALYSIS QUALITY REQUIREMENT
# the lumi in fb^-1 is used only by the plotting program
# approximate to only one decimal digit
lumi_fb = 60.0 # fb^-1

outputFolder = /gwpool/users/dzuolo/HHbbtautatuAnalysisLegacy/CMSSW_11_1_0_pre6/src/KLUBAnalysis/analysis_TauTau_Legacy2018_16July2020_shapeSync

data = DTauA, DTauB, DTauC, DTauD

signals = GGHHSM

backgrounds = TTfullyHad, TTfullyLep, TTsemiLep, DY, DY_LM, WJets_HT_0_100, WJets_HT_100_200, WJets_HT_200_400, WJets_HT_400_600, WJets_HT_600_800, WJets_HT_800_1200, WJets_HT_1200_2500, WJets_HT_2500_Inf, TWtop, TWantitop, singleTop_top, singleTop_antitop, EWKWMinus2Jets_WToLNu, EWKWPlus2Jets_WToLNu, EWKZ2Jets_ZToLL, WWTo2L2Nu, WWTo4Q, WWToLNuQQ, WZTo1L1Nu2Q, WZTo1L3Nu, WZTo2L2Q, WZTo3LNu, ZZTo2L2Nu, ZZTo2L2Q, ZZTo2Q2Nu, ZZTo4L, ZH_HBB_ZLL, ZH_HBB_ZQQ, ZH_HTauTau, ggHTauTau, VBFHTauTau, WplusHTauTau, WminusHTauTau, ttHJetTononBB, ttHJetToBB, ttHJetToTauTau, WWW, WWZ, WZZ, ZZZ, TTWJetsToLNu, TTWJetsToQQ, TTZToLLNuNu, TTZToQQ, TTWW, TTWZ, TTZZ, TTWH, TTZH

# TOGETHER WITH THE TARGET VARIABLES YOU NEED ALWAYS PLOT LOWER LEVEL VARIABLES TO CHECK THAT EVERYTHING IS OK
#variables = dau1_pt, dau2_pt, dau1_eta, dau2_eta, ditau_deltaR, bjet1_pt, bjet1_bID_deepFlavor, bjet2_pt, bjet2_bID_deepFlavor, tauH_mass, tauH_SVFIT_mass, tauH_pt, bH_mass, bH_pt, HH_mass_raw, HH_pt, BDToutSM_kl_1
variables = tauH_pt

# SELECTIONS W/O MASS CUT
#selections = baseline, s1b1jresolved, s2b0jresolved, sboostedLL, s0b2j, VBFloose, VBFtight

# SELECTIONS W/ MASS CUT
#selections = baselineMcut, s1b1jresolvedMcut, s2b0jresolvedMcut, sboostedLLMcut, s0b2j, VBFlooseMcut, VBFtightMcut

selections = baseline

regions    = SR, SStight, OSrlx, SSrlx, OSinviso, SSinviso


[configs]

sampleCfg = config/sampleCfg_Legacy2018.cfg
cutCfg    = config/selectionCfg_TauTau_Legacy2018.cfg


[merge]
# HERE THE MERGING OF THE BKGs IS DONE SO THAT WE CAN COMPUTE DURING THE PLOTTING ALSO THE YIELDS OF THE SIGLE PROCESSES INVOLVED
# IN ORDER TO HAVE THE SAME FINAL PLOTS AS FOR THE OTHER YEARS, WHEN PLOTTING THE MERGING IS FURTHER CARRIED OUT AS FOLLOWS:
# others = EWK + singleT + VH + singleT + VH + ttH + doubleTsingleV + doubleTVV + doubleV + tripleV + VBFHTauTau + ggHTauTau

#TT    = TTfullyHad, TTfullyLep, TTsemiLep
#WJets = WJets_HT_0_100, WJets_HT_100_200, WJets_HT_200_400, WJets_HT_400_600, WJets_HT_600_800, WJets_HT_800_1200, WJets_HT_1200_2500, WJets_HT_2500_Inf
#other = DY_LM, TWtop, TWantitop, singleTop_top, singleTop_antitop, EWKWMinus2Jets_WToLNu, EWKWPlus2Jets_WToLNu, EWKZ2Jets_ZToLL, WWTo2L2Nu, WWTo4Q, WWToLNuQQ, WZTo1L1Nu2Q, WZTo1L3Nu, WZTo2L2Q, WZTo3LNu, ZZTo2L2Nu, ZZTo2L2Q, ZZTo2Q2Nu, ZZTo4L, ZH_HBB_ZLL, ZH_HBB_ZQQ, ZH_HTauTau, ggHTauTau, VBFHTauTau, WplusHTauTau, WminusHTauTau, ttHJetTononBB, ttHJetToBB, ttHJetToTauTau, WWW, WWZ, WZZ, ZZZ, TTWJetsToLNu, TTWJetsToQQ, TTZToLLNuNu, TTZToQQ, TTWW, TTWZ, TTZZ, TTWH, TTZH

#For Jona limits
#TT             = TTfullyHad, TTfullyLep, TTsemiLep
#WJets          = WJets_HT_0_100, WJets_HT_100_200, WJets_HT_200_400, WJets_HT_400_600, WJets_HT_600_800, WJets_HT_800_1200, WJets_HT_1200_2500, WJets_HT_2500_Inf
#singleT        = TWtop, TWantitop, singleTop_top, singleTop_antitop
#EWK            = EWKWMinus2Jets_WToLNu, EWKWPlus2Jets_WToLNu, EWKZ2Jets_ZToLL
#VH             = ZH_HBB_ZLL, ZH_HBB_ZQQ, ZH_HTauTau, WplusHTauTau, WminusHTauTau
#ttH            = ttHJetToBB, ttHJetTononBB, ttHJetToTauTau
#doubleV        = ZZTo4L, ZZTo2L2Nu, ZZTo2L2Q, ZZTo2Q2Nu, WZTo3LNu, WZTo1L1Nu2Q, WZTo1L3Nu, WZTo2L2Q, WWTo2L2Nu, WWToLNuQQ, WWTo4Q
#tripleV        = ZZZ, WZZ, WWW, WWZ
#doubleTsingleV = TTWJetsToLNu, TTWJetsToQQ, TTZToLLNuNu, TTZToQQ
#doubleTVV      = TTZZ, TTWW, TTWZ, TTWH, TTZH

#For shape sync
TT	= TTfullyHad, TTfullyLep, TTsemiLep
W	= WJets_HT_0_100, WJets_HT_100_200, WJets_HT_200_400, WJets_HT_400_600, WJets_HT_600_800, WJets_HT_800_1200, WJets_HT_1200_2500, WJets_HT_2500_Inf
EWK	= EWKWMinus2Jets_WToLNu, EWKWPlus2Jets_WToLNu, EWKZ2Jets_ZToLL
singleT = TWtop, TWantitop, singleTop_top, singleTop_antitop
H	= ZH_HBB_ZLL, ZH_HBB_ZQQ, ZH_HTauTau, ggHTauTau, VBFHTauTau, WplusHTauTau, WminusHTauTau, ttHJetTononBB, ttHJetToBB, ttHJetToTauTau
TTV	= TTWJetsToLNu, TTWJetsToQQ, TTZToLLNuNu, TTZToQQ
TTVV	= TTZZ, TTWW, TTWZ, TTWH, TTZH
VV	= ZZTo4L, ZZTo2L2Nu, ZZTo2L2Q, ZZTo2Q2Nu, WZTo3LNu, WZTo1L1Nu2Q, WZTo1L3Nu, WZTo2L2Q, WWTo2L2Nu, WWToLNuQQ, WWTo4Q
VVV	= WWW, WWZ, WZZ, ZZZ

data_obs  = DTauA, DTauB, DTauC, DTauD

############################################################################################
############################################################################################
# the following lines are used for postprocessing (pp_), i.e. not read from AnalysisHelper
# but used in subsequent steps of the analysis to combine histos, compute QCD etc..
# we keep them here to have everything at hand

[pp_merge]


## in case some histos must be rebinned. Pass as
## uniqueid = varToRebin , condition, newBinning
# [pp_rebin]
# r1 = HHKin_mass_raw         , sboostedLLMcut , 250, 1000 # a unique, big bin
# r2 = HHKin_mass_raw_tauup   , sboostedLLMcut , 250, 1000 # a unique, big bin
# r3 = HHKin_mass_raw_taudown , sboostedLLMcut , 250, 1000 # a unique, big bin
# r4 = HHKin_mass_raw_jetup   , sboostedLLMcut , 250, 1000 # a unique, big bin
# r5 = HHKin_mass_raw_jetdown , sboostedLLMcut , 250, 1000 # a unique, big bin
#
# r6  = MT2         , sboostedLLMcut , 0, 150, 500 # two bins - the lowest one has small signal
# r7  = MT2_tauup   , sboostedLLMcut , 0, 150, 500 # two bins - the lowest one has small signal
# r8  = MT2_taudown , sboostedLLMcut , 0, 150, 500 # two bins - the lowest one has small signal
# r9  = MT2_jetup   , sboostedLLMcut , 0, 150, 500 # two bins - the lowest one has small signal
# r10 = MT2_jetdown , sboostedLLMcut , 0, 150, 500 # two bins - the lowest one has small signal

## parameters for QCD evaluation
## doFitIf : condition to be respected to make rlx-to-tight QCD fit. It is used as eval(doFitIf). Use names sel, var


[pp_QCD]
#QCDname      = QCD
#SR           = SR
#yieldSB      = SStight
#shapeSB      = SSrlx
#SBtoSRfactor = 1
#regionD = SSinviso
#regionC = OSinviso
#doFitIf      = False
#fitFunc      = [0] + [1]*x


#for inverted QCD
QCDname      = QCD
SR           = SR
yieldSB      = OSinviso
shapeSB      = OSinviso
SBtoSRfactor = 1
doFitIf      = False
fitFunc      = [0] + [1]*x
regionC      = SStight
regionD      = SSinviso


[VBF_rew]
# !WARNING! The input samples MUST be in the order: node1, node2, node3, node4, node5, node19 !
# See the list 'inputSignals' to understand the link node<->couplings
doReweighting = False
inputSignals = VBFHH_CV_1_C2V_1_C3_1, VBFHH_CV_1_C2V_1_C3_0, VBFHH_CV_1_C2V_1_C3_2, VBFHH_CV_1_C2V_2_C3_1, VBFHH_CV_1_5_C2V_1_C3_1, VBFHH_CV_1_C2V_0_C3_2
target_kl  = 1
target_cv  = 0, 1
target_c2v = 1
target_xs = 1 #[pb]
