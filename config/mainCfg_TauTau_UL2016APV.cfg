[general]

lumi = 19500 # pb^-1 2016 preVFP

outputFolder = analysis_TauTau_UL2016APV_8Apr2022_correctPreVFP_PUJetID_leptTrig

data = DTauB, DTauC, DTauD, DTauE, DTauF
#data = DTauB, DTauC, DTauD, DTauE, DTauF, DMETB, DMETC, DMETD, DMETE, DMETF

signals = ggHTauTau

backgrounds = TTfullyHad, TTfullyLep, TTsemiLep, DY, DY_Incl, WJets_HT_0_70, WJets_HT_70_100, WJets_HT_100_200, WJets_HT_200_400, WJets_HT_400_600, WJets_HT_600_800, WJets_HT_800_1200, WJets_HT_1200_2500, WJets_HT_2500_Inf, TWtop, TWantitop, singleTop_top, singleTop_antitop, EWKWMinus2Jets_WToLNu, EWKWPlus2Jets_WToLNu, EWKZ2Jets_ZToLL, WW, WZ, ZZ, ZH_HTauTau, ggHTauTau, VBFHTauTau, WplusHTauTau, WminusHTauTau, ttHJetTononBB, ttHJetToBB, WWW, WWZ, WZZ, ZZZ, TTWJetsToLNu, TTWJetsToQQ, TTZToLLNuNu, TTWW, TTWZ, TTZZ

variables = dau1_pt, dau2_pt, dau1_eta, dau2_eta, bjet1_pt, bjet2_pt, bjet1_eta, bjet2_eta, tauH_mass, tauH_SVFIT_mass, tauH_pt, tauH_SVFIT_pt, ditau_deltaR, bH_pt, bH_mass, HH_pt, HH_mass, HHKin_mass, met_et, met_phi

#selections = baseline, s1b1jresolvedMcut, s2b0jresolvedMcut, sboostedLLMcut
selections = baseline

regions    = SR, SStight, SSrlx, OSinviso, SSinviso


[configs]

sampleCfg = config/sampleCfg_UL2016APV.cfg
cutCfg    = config/selectionCfg_TauTau_UL2016APV.cfg
#pattern   = goodsystfiles  # use this only when running on systematics files


[merge]
TT       = TTfullyHad, TTfullyLep, TTsemiLep
WJets    = WJets_HT_0_70, WJets_HT_70_100, WJets_HT_100_200, WJets_HT_200_400, WJets_HT_400_600, WJets_HT_600_800, WJets_HT_800_1200, WJets_HT_1200_2500, WJets_HT_2500_Inf
other	 = EWKWMinus2Jets_WToLNu, EWKWPlus2Jets_WToLNu, EWKZ2Jets_ZToLL, TWtop, TWantitop, singleTop_top, singleTop_antitop, ZH_HTauTau, ggHTauTau, VBFHTauTau, WplusHTauTau, WminusHTauTau, ttHJetTononBB, ttHJetToBB, TTWJetsToLNu, TTWJetsToQQ, TTZToLLNuNu, TTWW, TTWZ, TTZZ, WW, WZ, ZZ, WWW, WWZ, WZZ, ZZZ

# For shape sync
#TT      = TTfullyHad, TTfullyLep, TTsemiLep
#W       = WJets_HT_0_70, WJets_HT_70_100, WJets_HT_100_200, WJets_HT_200_400, WJets_HT_400_600, WJets_HT_600_800, WJets_HT_800_1200, WJets_HT_1200_2500, WJets_HT_2500_Inf
#EWK     = EWKWMinus2Jets_WToLNu, EWKWPlus2Jets_WToLNu, EWKZ2Jets_ZToLL
#singleT = TWtop, TWantitop, singleTop_top, singleTop_antitop
#H       = ZH_HTauTau, ggHTauTau, VBFHTauTau, WplusHTauTau, WminusHTauTau, ttHJetTononBB, ttHJetToBB
#TTV     = TTWJetsToLNu, TTWJetsToQQ, TTZToLLNuNu
#TTVV    = TTWW, TTWZ, TTZZ
#VV      = WW, WZ, ZZ
#VVV     = WWW, WWZ, WZZ, ZZZ

# For limits
#TT             = TTfullyHad, TTfullyLep, TTsemiLep
#WJets          = WJets_HT_0_70, WJets_HT_70_100, WJets_HT_100_200, WJets_HT_200_400, WJets_HT_400_600, WJets_HT_600_800, WJets_HT_800_1200, WJets_HT_1200_2500, WJets_HT_2500_Inf
#EWK            = EWKWMinus2Jets_WToLNu, EWKWPlus2Jets_WToLNu, EWKZ2Jets_ZToLL
#singleT        = TWtop, TWantitop, singleTop_top, singleTop_antitop
#VH             = ZH_HTauTau, WplusHTauTau, WminusHTauTau
#ttH            = ttHJetTononBB, ttHJetToBB
#doubleTsingleV = TTWJetsToLNu, TTWJetsToQQ, TTZToLLNuNu
#doubleTVV      = TTWW, TTWZ, TTZZ
#doubleV        = WW, WZ, ZZ
#tripleV        = WWW, WWZ, WZZ, ZZZ

# For limits Chiara
#TT        = TTfullyHad, TTfullyLep, TTsemiLep
#WJets     = WJets_HT_0_70, WJets_HT_70_100, WJets_HT_100_200, WJets_HT_200_400, WJets_HT_400_600, WJets_HT_600_800, WJets_HT_800_1200, WJets_HT_1200_2500, WJets_HT_2500_Inf
#EWK       = EWKWMinus2Jets_WToLNu, EWKWPlus2Jets_WToLNu, EWKZ2Jets_ZToLL
#singleT   = TWtop, TWantitop, singleTop_top, singleTop_antitop
#ZH        = ZH_HTauTau
#WH        = WplusHTauTau, WminusHTauTau
#WW        = WW
#WZ        = WZ, ZZ
#others    = WWW, WWZ, WZZ, ZZZ, TTZZ, TTWW, TTWZ, TTWJetsToLNu, TTWJetsToQQ, TTZToLLNuNu, ggHTauTau, VBFHTauTau,  ttHJetTononBB, ttHJetToBB

data_obs  = DTauB, DTauC, DTauD, DTauE, DTauF
#data_obs  = DTauB, DTauC, DTauD, DTauE, DTauF, DMETB, DMETC, DMETD, DMETE, DMETF


############################################################################################
############################################################################################
# the following lines are used for postprocessing (pp_), i.e. not read from AnalysisHelper
# but used in subsequent steps of the analysis to combine histos, compute QCD etc..
# we keep them here to have everything at hand

[pp_merge]


## in case some histos must be rebinned. Pass as
## uniqueid = varToRebin , condition, newBinning
# [pp_rebin]
# r1 = HHKin_mass_raw         , sboostedLLMcut , 250, 1000 # a unique, big bin
# r2 = HHKin_mass_raw_tauup   , sboostedLLMcut , 250, 1000 # a unique, big bin
# r3 = HHKin_mass_raw_taudown , sboostedLLMcut , 250, 1000 # a unique, big bin
# r4 = HHKin_mass_raw_jetup   , sboostedLLMcut , 250, 1000 # a unique, big bin
# r5 = HHKin_mass_raw_jetdown , sboostedLLMcut , 250, 1000 # a unique, big bin
# 
# r6  = MT2         , sboostedLLMcut , 0, 150, 500 # two bins - the lowest one has small signal
# r7  = MT2_tauup   , sboostedLLMcut , 0, 150, 500 # two bins - the lowest one has small signal
# r8  = MT2_taudown , sboostedLLMcut , 0, 150, 500 # two bins - the lowest one has small signal
# r9  = MT2_jetup   , sboostedLLMcut , 0, 150, 500 # two bins - the lowest one has small signal
# r10 = MT2_jetdown , sboostedLLMcut , 0, 150, 500 # two bins - the lowest one has small signal

## parameters for QCD evaluation
## doFitIf : condition to be respected to make rlx-to-tight QCD fit. It is used as eval(doFitIf). Use names sel, var


[pp_QCD]
#for normal QCD
#QCDname      = QCD
#SR           = SR
#yieldSB      = SStight
#shapeSB      = SSrlx
#SBtoSRfactor = 1
#regionD      = SSinviso
#regionC      = OSinviso
#doFitIf      = False
#fitFunc      = [0] + [1]*x


#for inverted QCD
QCDname      = QCD
SR           = SR
yieldSB      = OSinviso
shapeSB      = OSinviso
SBtoSRfactor = 1
doFitIf      = False
fitFunc      = [0] + [1]*x
regionC      = SStight
regionD      = SSinviso


[VBF_rew]
# !WARNING! The input samples MUST be in the order: node1, node2, node3, node4, node5, node19 !
# See the list 'inputSignals' to understand the link node<->couplings
doReweighting = False
inputSignals = VBFHH_CV_1_C2V_1_C3_1, VBFHH_CV_1_C2V_1_C3_0, VBFHH_CV_1_C2V_1_C3_2, VBFHH_CV_1_C2V_2_C3_1, VBFHH_CV_1_5_C2V_1_C3_1, VBFHH_CV_1_C2V_0_C3_2
target_kl  = 1
target_cv  = 0, 1
target_c2v = 1
target_xs = 1 #[pb]
