# the definition of composed selections. Can contain as well TCut style selections, e.g.:
# resolved = baseline, btagMM, massCut
# resolvedHighPt = baseline, btagMM, massCut, dau1_pt > 150
# use comma separated lists
[selections]

# pT and eta cuts are already applied at trig match level, so they are not needed here
baseline         = pairType == 1 && nleps == 0 && nbjetscand > 1 && isLeptrigger
baselineVBFtight = pairType == 1 && nleps == 0 && nbjetscand > 1 && (dau1_pt > 25 && dau2_pt > 25 && (dau1_pt <= 40 || dau2_pt <= 40)) && VBFjj_mass > 800 && VBFjet1_pt > 140 && VBFjet2_pt > 60
baselineMcut     = baseline, tauH_SVFIT_mass > 50
baselineVBFloose = baseline, isVBF == 1 && VBFjj_mass > 500 && VBFjj_deltaEta > 3 && (((dau1_pt > 25 && dau2_pt > 25 && (dau1_pt <= 40 || dau2_pt <= 40)) && VBFjj_mass > 800 && VBFjet1_pt > 140 && VBFjet2_pt > 60) || isVBFtrigger==0)

# btag requirements - DeepFlavor WPs={0.0532, 0.3040, 0.7476}; // L,M,T -- UL 2017 DeepFlavor
btagL        = (bjet1_bID_deepFlavor > 0.0532 && bjet2_bID_deepFlavor < 0.0532) || (bjet1_bID_deepFlavor < 0.0532 && bjet2_bID_deepFlavor > 0.0532) #only 1 jet with loose btag working point
btagM        = (bjet1_bID_deepFlavor > 0.3040 && bjet2_bID_deepFlavor < 0.3040) || (bjet1_bID_deepFlavor < 0.3040 && bjet2_bID_deepFlavor > 0.3040) #only 1 jet with medium btag working point
btagMfirst   = (bjet1_bID_deepFlavor > 0.3040) || (bjet2_bID_deepFlavor > 0.3040)                                                                   #at least 1 jet with medium btag working point
btagLL       = bjet1_bID_deepFlavor > 0.0532 && bjet2_bID_deepFlavor > 0.0532 #both jets with loose btag working point
btagMM       = bjet1_bID_deepFlavor > 0.3040 && bjet2_bID_deepFlavor > 0.3040 #both jets with medium btag working point
nobtagMM     = bjet1_bID_deepFlavor < 0.3040 && bjet2_bID_deepFlavor < 0.3040 #both jets NOT btagged (medium working point)


massCut       = bH_mass_raw > 80 && bH_mass_raw < 160 && tauH_SVFIT_mass > 80 && tauH_SVFIT_mass < 160
massCutCent   = tauH_SVFIT_mass > 79.5 && tauH_SVFIT_mass < 152.5 && bH_mass_raw > 74.5 && bH_mass_raw < 147.5
boostMassCut  = tauH_SVFIT_mass > 79.5 && tauH_SVFIT_mass < 152.5 && fatjet_softdropMass > 90 && fatjet_softdropMass < 160
ellypsMassCut = ((tauH_SVFIT_mass-116.)*(tauH_SVFIT_mass-116.))/(35.*35.) + ((bH_mass_raw-111.)*(bH_mass_raw-111.))/(45.*45.) <  1.0 # mass cut centered on the Hbb Htt masses, applied in the final selections
circMassCut   = TMath::Sqrt((tauH_SVFIT_mass-116.)*(tauH_SVFIT_mass-116.) + (bH_mass_raw-111.)*(bH_mass_raw-111.)) <  40.0
massCutHbb    = bH_mass_raw > 66 && bH_mass_raw < 156
massCutHtt    = tauH_SVFIT_mass > 81 && tauH_SVFIT_mass < 151

# updated mass cuts to be used with DNN 2020-07-31 (both ellyptical)
# https://github.com/GilesStrong/cms_runII_dnn_models#mass-cuts
boostMassCut2          = ((tauH_SVFIT_mass-128.)*(tauH_SVFIT_mass-128.))/(60.*60.) + ((bH_mass_raw-159.)*(bH_mass_raw-159.))/(94.*94.)   <  1.0
ellypsMassCut2         = ((tauH_SVFIT_mass-129.)*(tauH_SVFIT_mass-129.))/(53.*53.) + ((bH_mass_raw-169.)*(bH_mass_raw-169.))/(145.*145.) <  1.0
ellypsMassCut2Inverted = ((tauH_SVFIT_mass-129.)*(tauH_SVFIT_mass-129.))/(53.*53.) + ((bH_mass_raw-169.)*(bH_mass_raw-169.))/(145.*145.) >=  1.0

# ABCD regions used in the analysis - DeepTau
SR           = isOS != 0 && dau1_eleMVAiso == 1 && dau2_deepTauVsJet >= 5                          # signal region: opposite sign, isolated taus
SStight      = isOS == 0 && dau1_eleMVAiso == 1 && dau2_deepTauVsJet >= 5                          # B region
OSrlx        = isOS != 0 && dau1_eleMVAiso == 1 && dau2_deepTauVsJet >= 1
SSrlx        = isOS == 0 && dau1_eleMVAiso == 1 && dau2_deepTauVsJet >= 1                          # B' region
OSinviso     = isOS != 0 && dau1_eleMVAiso == 1 && dau2_deepTauVsJet >= 1 && dau2_deepTauVsJet < 5 # C region
SSinviso     = isOS == 0 && dau1_eleMVAiso == 1 && dau2_deepTauVsJet >= 1 && dau2_deepTauVsJet < 5 # D region

# final categories without masscut
s2b0jresolved = baseline , btagMM, isBoosted != 1, !(isVBF == 1 && VBFjj_mass > 500 && VBFjj_deltaEta > 3 && (bjet1_bID_deepFlavor > 0.3040 || bjet2_bID_deepFlavor > 0.3040) )

# final categories - Run2 Legacy (including VBF category)
s1b1jresolvedMcut = baseline , btagM , isBoosted != 1 , ellypsMassCut2, !(isVBF == 1 && VBFjj_mass > 500 && VBFjj_deltaEta > 3 && (((dau1_pt > 25 && dau2_pt > 25 && (dau1_pt <= 40 || dau2_pt <= 40)) && VBFjj_mass > 800 && VBFjet1_pt > 140 && VBFjet2_pt > 60) || isVBFtrigger==0) && (bjet1_bID_deepFlavor > 0.3040 || bjet2_bID_deepFlavor > 0.3040) )
s2b0jresolvedMcut = baseline , btagMM, isBoosted != 1 , ellypsMassCut2, !(isVBF == 1 && VBFjj_mass > 500 && VBFjj_deltaEta > 3 && (((dau1_pt > 25 && dau2_pt > 25 && (dau1_pt <= 40 || dau2_pt <= 40)) && VBFjj_mass > 800 && VBFjet1_pt > 140 && VBFjet2_pt > 60) || isVBFtrigger==0) && (bjet1_bID_deepFlavor > 0.3040 || bjet2_bID_deepFlavor > 0.3040) )
sboostedLLMcut    = baseline , btagLL, isBoosted == 1 , boostMassCut2 , !(isVBF == 1 && VBFjj_mass > 500 && VBFjj_deltaEta > 3 && (((dau1_pt > 25 && dau2_pt > 25 && (dau1_pt <= 40 || dau2_pt <= 40)) && VBFjj_mass > 800 && VBFjet1_pt > 140 && VBFjet2_pt > 60) || isVBFtrigger==0) && (bjet1_bID_deepFlavor > 0.3040 || bjet2_bID_deepFlavor > 0.3040) )

s1b1jresolvedMcutInverted = baseline , btagM , isBoosted != 1 , ellypsMassCut2Inverted, !(isVBF == 1 && VBFjj_mass > 500 && VBFjj_deltaEta > 3 && (((dau1_pt > 25 && dau2_pt > 25 && (dau1_pt <= 40 || dau2_pt <= 40)) && VBFjj_mass > 800 && VBFjet1_pt > 140 && VBFjet2_pt > 60) || isVBFtrigger==0) && (bjet1_bID_deepFlavor > 0.3040 || bjet2_bID_deepFlavor > 0.3040) )
s2b0jresolvedMcutInverted = baseline , btagMM, isBoosted != 1 , ellypsMassCut2Inverted, !(isVBF == 1 && VBFjj_mass > 500 && VBFjj_deltaEta > 3 && (((dau1_pt > 25 && dau2_pt > 25 && (dau1_pt <= 40 || dau2_pt <= 40)) && VBFjj_mass > 800 && VBFjet1_pt > 140 && VBFjet2_pt > 60) || isVBFtrigger==0) && (bjet1_bID_deepFlavor > 0.3040 || bjet2_bID_deepFlavor > 0.3040) )

# VBF category
VBFloose     = baselineVBFloose, btagMfirst
VBFlooseMcut = VBFloose, ellypsMassCut
VBFtight     = baselineVBFtight, btagMfirst
VBFtightMcut = VBFtight, ellypsMassCut


# VBF "multi-categories"
#mpp_ggf_v5    = (mdnn__v5__kl1_c2v1_c31_vbf__hh_ggf > mdnn__v5__kl1_c2v1_c31_vbf__hh_vbf) && (mdnn__v5__kl1_c2v1_c31_vbf__hh_ggf > mdnn__v5__kl1_c2v1_c31_vbf__tth)    && (mdnn__v5__kl1_c2v1_c31_vbf__hh_ggf > mdnn__v5__kl1_c2v1_c31_vbf__tt_lep) && (mdnn__v5__kl1_c2v1_c31_vbf__hh_ggf > mdnn__v5__kl1_c2v1_c31_vbf__tt_fh)  && (mdnn__v5__kl1_c2v1_c31_vbf__hh_ggf > mdnn__v5__kl1_c2v1_c31_vbf__dy)
#mpp_vbf_v5    = (mdnn__v5__kl1_c2v1_c31_vbf__hh_vbf > mdnn__v5__kl1_c2v1_c31_vbf__hh_ggf) && (mdnn__v5__kl1_c2v1_c31_vbf__hh_vbf > mdnn__v5__kl1_c2v1_c31_vbf__tth)    && (mdnn__v5__kl1_c2v1_c31_vbf__hh_vbf > mdnn__v5__kl1_c2v1_c31_vbf__tt_lep) && (mdnn__v5__kl1_c2v1_c31_vbf__hh_vbf > mdnn__v5__kl1_c2v1_c31_vbf__tt_fh)  && (mdnn__v5__kl1_c2v1_c31_vbf__hh_vbf > mdnn__v5__kl1_c2v1_c31_vbf__dy)
#mpp_tth_v5    = (mdnn__v5__kl1_c2v1_c31_vbf__tth    > mdnn__v5__kl1_c2v1_c31_vbf__hh_ggf) && (mdnn__v5__kl1_c2v1_c31_vbf__tth    > mdnn__v5__kl1_c2v1_c31_vbf__hh_vbf) && (mdnn__v5__kl1_c2v1_c31_vbf__tth    > mdnn__v5__kl1_c2v1_c31_vbf__tt_lep) && (mdnn__v5__kl1_c2v1_c31_vbf__tth    > mdnn__v5__kl1_c2v1_c31_vbf__tt_fh)  && (mdnn__v5__kl1_c2v1_c31_vbf__tth    > mdnn__v5__kl1_c2v1_c31_vbf__dy)
#mpp_ttlep_v5  = (mdnn__v5__kl1_c2v1_c31_vbf__tt_lep > mdnn__v5__kl1_c2v1_c31_vbf__hh_ggf) && (mdnn__v5__kl1_c2v1_c31_vbf__tt_lep > mdnn__v5__kl1_c2v1_c31_vbf__hh_vbf) && (mdnn__v5__kl1_c2v1_c31_vbf__tt_lep > mdnn__v5__kl1_c2v1_c31_vbf__tth)    && (mdnn__v5__kl1_c2v1_c31_vbf__tt_lep > mdnn__v5__kl1_c2v1_c31_vbf__tt_fh)  && (mdnn__v5__kl1_c2v1_c31_vbf__tt_lep > mdnn__v5__kl1_c2v1_c31_vbf__dy)
#mpp_tthad_v5  = (mdnn__v5__kl1_c2v1_c31_vbf__tt_fh  > mdnn__v5__kl1_c2v1_c31_vbf__hh_ggf) && (mdnn__v5__kl1_c2v1_c31_vbf__tt_fh  > mdnn__v5__kl1_c2v1_c31_vbf__hh_vbf) && (mdnn__v5__kl1_c2v1_c31_vbf__tt_fh  > mdnn__v5__kl1_c2v1_c31_vbf__tth)    && (mdnn__v5__kl1_c2v1_c31_vbf__tt_fh  > mdnn__v5__kl1_c2v1_c31_vbf__tt_lep) && (mdnn__v5__kl1_c2v1_c31_vbf__tt_fh  > mdnn__v5__kl1_c2v1_c31_vbf__dy)
#mpp_dy_v5     = (mdnn__v5__kl1_c2v1_c31_vbf__dy     > mdnn__v5__kl1_c2v1_c31_vbf__hh_ggf) && (mdnn__v5__kl1_c2v1_c31_vbf__dy     > mdnn__v5__kl1_c2v1_c31_vbf__hh_vbf) && (mdnn__v5__kl1_c2v1_c31_vbf__dy     > mdnn__v5__kl1_c2v1_c31_vbf__tth)    && (mdnn__v5__kl1_c2v1_c31_vbf__dy     > mdnn__v5__kl1_c2v1_c31_vbf__tt_lep) && (mdnn__v5__kl1_c2v1_c31_vbf__dy     > mdnn__v5__kl1_c2v1_c31_vbf__tt_fh)

mpp_ggf_v5    = (mdnn__v5__kl1_c2v1_c31_vbf__hh_ggf > mdnn__v5__kl1_c2v1_c31_vbf__hh_vbf) && (mdnn__v5__kl1_c2v1_c31_vbf__hh_ggf > mdnn__v5__kl1_c2v1_c31_vbf__tth)    && (mdnn__v5__kl1_c2v1_c31_vbf__hh_ggf > (mdnn__v5__kl1_c2v1_c31_vbf__tt_lep+mdnn__v5__kl1_c2v1_c31_vbf__tt_fh)) && (mdnn__v5__kl1_c2v1_c31_vbf__hh_ggf > mdnn__v5__kl1_c2v1_c31_vbf__dy)
mpp_vbf_v5    = (mdnn__v5__kl1_c2v1_c31_vbf__hh_vbf > mdnn__v5__kl1_c2v1_c31_vbf__hh_ggf) && (mdnn__v5__kl1_c2v1_c31_vbf__hh_vbf > mdnn__v5__kl1_c2v1_c31_vbf__tth)    && (mdnn__v5__kl1_c2v1_c31_vbf__hh_vbf > (mdnn__v5__kl1_c2v1_c31_vbf__tt_lep+mdnn__v5__kl1_c2v1_c31_vbf__tt_fh)) && (mdnn__v5__kl1_c2v1_c31_vbf__hh_vbf > mdnn__v5__kl1_c2v1_c31_vbf__dy)
mpp_tth_v5    = (mdnn__v5__kl1_c2v1_c31_vbf__tth    > mdnn__v5__kl1_c2v1_c31_vbf__hh_ggf) && (mdnn__v5__kl1_c2v1_c31_vbf__tth    > mdnn__v5__kl1_c2v1_c31_vbf__hh_vbf) && (mdnn__v5__kl1_c2v1_c31_vbf__tth    > (mdnn__v5__kl1_c2v1_c31_vbf__tt_lep+mdnn__v5__kl1_c2v1_c31_vbf__tt_fh)) && (mdnn__v5__kl1_c2v1_c31_vbf__tth    > mdnn__v5__kl1_c2v1_c31_vbf__dy)
mpp_dy_v5     = (mdnn__v5__kl1_c2v1_c31_vbf__dy     > mdnn__v5__kl1_c2v1_c31_vbf__hh_ggf) && (mdnn__v5__kl1_c2v1_c31_vbf__dy     > mdnn__v5__kl1_c2v1_c31_vbf__hh_vbf) && (mdnn__v5__kl1_c2v1_c31_vbf__dy     > (mdnn__v5__kl1_c2v1_c31_vbf__tt_lep+mdnn__v5__kl1_c2v1_c31_vbf__tt_fh)) && (mdnn__v5__kl1_c2v1_c31_vbf__dy     > mdnn__v5__kl1_c2v1_c31_vbf__tth)
mpp_tt_v5     = ((mdnn__v5__kl1_c2v1_c31_vbf__tt_lep+mdnn__v5__kl1_c2v1_c31_vbf__tt_fh) > mdnn__v5__kl1_c2v1_c31_vbf__hh_ggf) && ((mdnn__v5__kl1_c2v1_c31_vbf__tt_lep+mdnn__v5__kl1_c2v1_c31_vbf__tt_fh) > mdnn__v5__kl1_c2v1_c31_vbf__hh_vbf) && ((mdnn__v5__kl1_c2v1_c31_vbf__tt_lep+mdnn__v5__kl1_c2v1_c31_vbf__tt_fh) > mdnn__v5__kl1_c2v1_c31_vbf__tth) && ((mdnn__v5__kl1_c2v1_c31_vbf__tt_lep+mdnn__v5__kl1_c2v1_c31_vbf__tt_fh) > mdnn__v5__kl1_c2v1_c31_vbf__dy)

# replace v1 <-> v2 depending on which training is being used
GGFclass    = VBFloose, mpp_ggf_v5
VBFclass    = VBFloose, mpp_vbf_v5
ttHclass    = VBFloose, mpp_tth_v5
TTlepclass  = VBFloose, mpp_ttlep_v5
TThadclass  = VBFloose, mpp_tthad_v5
DYclass     = VBFloose, mpp_dy_v5
TTclass     = VBFloose, mpp_tt_v5


#########################################################################
#########################################################################

## weights to be applied for a certain selections when calling Fill()
## multiple weights are passed as list and are multiplied together
## NOTE: no weight is applied for data (the simple Fill() is used)
[selectionWeights]
#baseline = MC_weight, PUReweight, L1pref_weight, trigSF, IdAndIsoAndFakeSF_deep_pt, DYscale_MTT, prescaleWeight, PUjetID_SF, customTauIdSF, bTagweightReshape
baseline = MC_weight, PUReweight, L1pref_weight, trigSF, IdFakeSF_deep_2d, PUjetID_SF, bTagweightReshape

# remove DY weights, they are already taken into account in baseline weights
#btagLL   = bTagweightL
#btagMM   = bTagweightM
#nobtagMM = bTagweightM
#btagL    = bTagweightL
#btagM    = bTagweightM
#btagMfirst    = bTagweightM

[selectionWeights_ext] # beta feature! use with care!
#weights decay mode dependent computed for 2017 Legacy computed on top of pt dep SF
# From October 2020 these weights are stored in the branch "customTauIdSF" and directly applied in the [selectionWeights] section
#baseline        = (dau1_decayMode == 0 && isTau1real): 1.078, (dau2_decayMode == 0 && isTau2real): 1.078, (dau1_decayMode == 1 && isTau1real): 1.112, (dau2_decayMode == 1 && isTau2real): 1.112, (dau1_decayMode == 10 && isTau1real): 0.984, (dau2_decayMode == 10 && isTau2real): 0.984, (dau1_decayMode == 11 && isTau1real): 0.759, (dau2_decayMode == 11 && isTau2real): 0.759
#baselineHTauTau = (dau1_decayMode == 0 && isTau1real): 1.078, (dau2_decayMode == 0 && isTau2real): 1.078, (dau1_decayMode == 1 && isTau1real): 1.112, (dau2_decayMode == 1 && isTau2real): 1.112, (dau1_decayMode == 10 && isTau1real): 0.984, (dau2_decayMode == 10 && isTau2real): 0.984, (dau1_decayMode == 11 && isTau1real): 0.759, (dau2_decayMode == 11 && isTau2real): 0.759
#baseline        = (dau1_decayMode == 0 && isTau1real): 1.0  , (dau2_decayMode == 0 && isTau2real): 1.0  , (dau1_decayMode == 1 && isTau1real): 1.0  , (dau2_decayMode == 1 && isTau2real): 1.0  , (dau1_decayMode == 10 && isTau1real): 1.0  , (dau2_decayMode == 10 && isTau2real): 1.0  , (dau1_decayMode == 11 && isTau1real): 1.0  , (dau2_decayMode == 11 && isTau2real): 1.0
#baselineHTauTau = (dau1_decayMode == 0 && isTau1real): 1.0  , (dau2_decayMode == 0 && isTau2real): 1.0  , (dau1_decayMode == 1 && isTau1real): 1.0  , (dau2_decayMode == 1 && isTau2real): 1.0  , (dau1_decayMode == 10 && isTau1real): 1.0  , (dau2_decayMode == 10 && isTau2real): 1.0  , (dau1_decayMode == 11 && isTau1real): 1.0  , (dau2_decayMode == 11 && isTau2real): 1.0

#########################################################################
#########################################################################

[sampleWeights]
#TTfullyHad = TTtopPtreweight
#TTfullyLep = TTtopPtreweight
#TTsemiLep  = TTtopPtreweight

#########################################################################
#########################################################################

# define alternative weights to be tested instead of the nominal one
[systematics]
#IdAndIsoAndFakeSF_deep_pt = tauid_pt40toInfUp:idAndIsoAndFakeSF_tauid_pt40toInf_up, tauid_pt40toInfDown:idAndIsoAndFakeSF_tauid_pt40toInf_down, etauFR_barrelUp:idAndIsoAndFakeSF_etauFR_barrel_up, etauFR_barrelDown:idAndIsoAndFakeSF_etauFR_barrel_down, etauFR_endcapUp:idAndIsoAndFakeSF_etauFR_endcap_up, etauFR_endcapDown:idAndIsoAndFakeSF_etauFR_endcap_down
#trigSF = trigSFDM0Up:trigSF_DM0_up, trigSFDM0Down:trigSF_DM0_down, trigSFDM1Up:trigSF_DM1_up, trigSFDM1Down:trigSF_DM1_down, trigSFDM10Up:trigSF_DM10_up, trigSFDM10Down:trigSF_DM10_down, trigSFDM11Up:trigSF_DM11_up, trigSFDM11Down:trigSF_DM11_down, trigSFJetUp:trigSF_vbfjet_up, trigSFJetDown:trigSF_vbfjet_down
#customTauIdSF = customTauIdSFDM0Up:customTauIdSF_DM0_up, customTauIdSFDM0Down:customTauIdSF_DM0_down, customTauIdSFDM1Up:customTauIdSF_DM1_up, customTauIdSFDM1Down:customTauIdSF_DM1_down, customTauIdSFDM10Up:customTauIdSF_DM10_up, customTauIdSFDM10Down:customTauIdSF_DM10_down, customTauIdSFDM11Up:customTauIdSF_DM11_up, customTauIdSFDM11Down:customTauIdSF_DM11_down
#PUjetID_SF = PUjetIDSFUp:PUjetID_SF_up, PUjetIDSFDown:PUjetID_SF_down
#bTagweightReshape = bTagweightReshapeLFUp:bTagweightReshape_lf_up, bTagweightReshapeHFUp:bTagweightReshape_hf_up, bTagweightReshapeHFSTATS1Up:bTagweightReshape_hfstats1_up, bTagweightReshapeHFSTATS2Up:bTagweightReshape_hfstats2_up, bTagweightReshapeLFSTATS1Up:bTagweightReshape_lfstats1_up, bTagweightReshapeLFSTATS2Up:bTagweightReshape_lfstats2_up, bTagweightReshapeCFERR1Up:bTagweightReshape_cferr1_up, bTagweightReshapeCFERR2Up:bTagweightReshape_cferr2_up, bTagweightReshapeLFDown:bTagweightReshape_lf_down, bTagweightReshapeHFDown:bTagweightReshape_hf_down, bTagweightReshapeHFSTATS1Down:bTagweightReshape_hfstats1_down, bTagweightReshapeHFSTATS2Down:bTagweightReshape_hfstats2_down, bTagweightReshapeLFSTATS1Down:bTagweightReshape_lfstats1_down, bTagweightReshapeLFSTATS2Down:bTagweightReshape_lfstats2_down, bTagweightReshapeCFERR1Down:bTagweightReshape_cferr1_down, bTagweightReshapeCFERR2Down:bTagweightReshape_cferr2_down
#bTagweightM = bTagSFMUp:bTagweightM_up, bTagSFMDown:bTagweightM_down
#bTagweightL = bTagSFLUp:bTagweightL_up, bTagSFLDown:bTagweightL_down
#TTtopPtreweight = topUp:TTtopPtreweight_up , topDown:TTtopPtreweight_down

#########################################################################
#########################################################################

# ROOT-like definition of the binning
[histos]

nbjetscand              = 20, 0, 20
njets                   = 20, 0, 20
npv                     = 50, 0, 50
npu                     = 25, 0, 50

dau1_pt                 = 20, 0, 200
dau1_eta                = 21, -2.1, 2.1
dau1_phi                = 25, -3.14159, 3.14159
dau1_iso                = 24, 0, 8
dau1_dxy                = 100, -0.01, 0.01
dau1_dz                 = 100, -0.1, 0.1
dau2_pt                 = 20, 0, 200
dau2_eta                = 21, -2.1, 2.1
dau2_phi                = 25, -3.14159, 3.14159
dau2_dxy                = 100, -0.01, 0.01
dau2_dz                 = 100, -0.1, 0.1

met_et                  = 35, 0, 350
met_phi                 = 25, -0.2, 6.3
met_er_et               = 30, 0, 600
met_er_phi              = 25, -3.14159, 3.14159

bjet1_pt                = 30, 20, 200
bjet1_eta               = 25, -2.5, 2.5
bjet1_phi               = 25, -3.14159, 3.14159
bjet1_bID_deepFlavor    = 15, 0, 1
bjet2_pt                = 30, 20, 200
bjet2_eta               = 25, -2.5, 2.5
bjet2_phi               = 25, -3.14159, 3.14159
bjet2_bID_deepFlavor    = 15, 0, 1

bH_mass                 = 30, 0, 300
bH_mass_raw             = 30, 0, 300
bH_pt                   = 30, 0, 300
dib_deltaR              = 25, 0, 5
dib_deltaPhi            = 15, 0., 3.14159
dib_deltaEta            = 20, 0, 10

tauH_mass               = 30, 0, 300
tauH_pt                 = 30, 0, 300
tauH_SVFIT_mass         = 30, 0, 300
tauH_SVFIT_pt           = 30, 0, 300
ditau_deltaR            = 25, 0, 5
ditau_deltaPhi          = 15, 0., 3.14159
ditau_deltaEta          = 20, 0, 10

HH_mass                 = 30, 100, 700
HH_mass_raw             = 30, 100, 700
HH_pt                   = 30, 0, 300
HHKin_mass              = 50, 250, 750
HH_deltaPhi             = 15, 0., 3.14159
HHsvfit_pt              = 30, 0, 300
HHsvfit_deltaPhi        = 25, 0, 3.14159
HH_deltaR               = 35, 0, 7

VBFjj_mass              = 50, 500, 2500
VBFjj_deltaEta          = 20, 0, 10
VBFjj_dEtaSign          = 40, -20, 20
VBFjet1_pt              = 20, 0, 500
VBFjet1_eta             = 20, -5.0, 5.0
VBFjet1_phi             = 25, -3.14159, 3.14159
VBFjet1_btag_deepFlavor = 20, 0, 1
VBFjet2_pt              = 20, 0, 500
VBFjet2_eta             = 20, -5.0, 5.0
VBFjet2_phi             = 25, -3.14159, 3.14159
VBFjet2_btag_deepFlavor = 20, 0, 1

fatjet_softdropMass     = 50, 0, 300

#DNNoutSM_kl_1              = 20,0,1
#DNNoutSM_kl_1_tauup_DM0    = 20,0,1
#DNNoutSM_kl_1_taudown_DM0  = 20,0,1
#DNNoutSM_kl_1_tauup_DM1    = 20,0,1
#DNNoutSM_kl_1_taudown_DM1  = 20,0,1
#DNNoutSM_kl_1_tauup_DM10   = 20,0,1
#DNNoutSM_kl_1_taudown_DM10 = 20,0,1
#DNNoutSM_kl_1_tauup_DM11   = 20,0,1
#DNNoutSM_kl_1_taudown_DM11 = 20,0,1
#DNNoutSM_kl_1_eleup_DM0    = 20,0,1
#DNNoutSM_kl_1_eledown_DM0  = 20,0,1
#DNNoutSM_kl_1_eleup_DM1    = 20,0,1
#DNNoutSM_kl_1_eledown_DM1  = 20,0,1
#DNNoutSM_kl_1_muup         = 20,0,1
#DNNoutSM_kl_1_mudown       = 20,0,1
#DNNoutSM_kl_1_jetupTot     = 20,0,1
#DNNoutSM_kl_1_jetdownTot   = 20,0,1
#DNNoutSM_kl_1_jetup1       = 20,0,1
#DNNoutSM_kl_1_jetup2       = 20,0,1
#DNNoutSM_kl_1_jetup3       = 20,0,1
#DNNoutSM_kl_1_jetup4       = 20,0,1
#DNNoutSM_kl_1_jetup5       = 20,0,1
#DNNoutSM_kl_1_jetup6       = 20,0,1
#DNNoutSM_kl_1_jetup7       = 20,0,1
#DNNoutSM_kl_1_jetup8       = 20,0,1
#DNNoutSM_kl_1_jetup9       = 20,0,1
#DNNoutSM_kl_1_jetup10      = 20,0,1
#DNNoutSM_kl_1_jetup11      = 20,0,1
#DNNoutSM_kl_1_jetdown1     = 20,0,1
#DNNoutSM_kl_1_jetdown2     = 20,0,1
#DNNoutSM_kl_1_jetdown3     = 20,0,1
#DNNoutSM_kl_1_jetdown4     = 20,0,1
#DNNoutSM_kl_1_jetdown5     = 20,0,1
#DNNoutSM_kl_1_jetdown6     = 20,0,1
#DNNoutSM_kl_1_jetdown7     = 20,0,1
#DNNoutSM_kl_1_jetdown8     = 20,0,1
#DNNoutSM_kl_1_jetdown9     = 20,0,1
#DNNoutSM_kl_1_jetdown10    = 20,0,1
#DNNoutSM_kl_1_jetdown11    = 20,0,1


#########################################################################
#########################################################################

# user defined binning for a variable - has precedence on [histos]
[binning]

# Dummy binning needed to have make the binning for different categories work properly.
# These binnings will actually be overwritten by:  category:variable = 0.0, ....
#DNNoutSM_kl_1              = 0.0, 0.5, 1.0


#########################################################################
#########################################################################

[histos2D]
#tauH_SVFIT_mass:bH_mass_raw = 70, 0, 350, 100, 0, 500
#tauH_mass:bH_mass           = 100, 0, 500, 100, 0, 500
#genDecMode1:genDecMode2     = 10, -2,   8, 10, -2, 8
#VBFjj_deltaEta:VBFjj_mass   = 40,  0,  10, 80,  0, 4000

#########################################################################
#########################################################################

# user defined binning for a variable - will override the definition in [histos2D]
# NOTE: if both x and y binnings are defined, there is no need to insert a binning in [histos2D]
# note: to specify an user binning for a certain axis of a 2D plot, e.g. a binning for B in A:B, use '@' :
# A:B@B = 0, 15, 20, 30, 50, 1000
[binning2D]
# tauH_SVFIT_mass:bH_mass_raw@bH_mass_raw     = 10, 35, 60, 85, 110, 135, 160, 185, 210, 250, 300, 350, 400, 500
# tauH_SVFIT_mass:bH_mass_raw@tauH_SVfit_mass = 10, 35, 60, 85, 110, 135, 160, 185, 210, 250, 300, 350, 400, 500
