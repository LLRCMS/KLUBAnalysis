[general]

lumi = 35922 # pb^-1 full 2016
# the lumi in fb^-1 is used only by the plotting program
# approximate to only one decimal digit
lumi_fb = 35.9 # pb^-1 full 2017

outputFolder = analysis_MuTau_2016_1Sept2020_syst

data = DsingleMuB, DsingleMuC, DsingleMuD, DsingleMuE, DsingleMuF, DsingleMuG, DsingleMuH

signals = GGHH_NLO_cHHH1_xs, GGHH_NLO_cHHH0_xs, GGHH_NLO_cHHH5_xs, VBFHH_CV_1_C2V_1_C3_1_xs, VBFHH_CV_0p5_C2V_1_C3_1_xs, VBFHH_CV_1p5_C2V_1_C3_1_xs, VBFHH_CV_1_C2V_1_C3_0_xs, VBFHH_CV_1_C2V_1_C3_2_xs, VBFHH_CV_1_C2V_2_C3_1_xs

backgrounds = TTfullyHad, TTfullyLep, TTsemiLep, DY_HM, DY_LM, WJets_HT_0_70, WJets_HT_70_100, WJets_HT_100_200, WJets_HT_200_400, WJets_HT_400_600, WJets_HT_600_800, WJets_HT_800_1200, WJets_HT_1200_2500, WJets_HT_2500_Inf, TWtop, TWantitop, singleTop_top, singleTop_antitop, EWKWMinus2Jets_WToLNu, EWKWPlus2Jets_WToLNu, EWKZ2Jets_ZToLL, WWTo2L2Nu, WWTo4Q, WWToLNuQQ, WZTo1L1Nu2Q, WZTo1L3Nu, WZTo2L2Q, WZTo3LNu, ZZTo2L2Nu, ZZTo2L2Q, ZZTo2Q2Nu, ZZTo4L, ZZTo4Q, ZH_HBB_ZLL, ZH_HTauTau, ggHTauTau, VBFHTauTau, WplusHTauTau, WminusHTauTau, ttHJetTononBB, ttHJetToBB, WWW, WWZ, WZZ, ZZZ, TTWJetsToLNu, TTWJetsToQQ, TTZToLLNuNu, TTWW, TTWZ, TTZZ

variables = DNNoutSM_kl_1, mdnn__v2__kl1_c2v1_c31__hh_ggf, mdnn__v2__kl1_c2v1_c31__hh_vbf, mdnn__v2__kl1_c2v1_c31__tth, mdnn__v2__kl1_c2v1_c31__tt_lep, mdnn__v2__kl1_c2v1_c31__tt_fh, mdnn__v2__kl1_c2v1_c31__dy

selections = s1b1jresolvedMcut_nominal, s2b0jresolvedMcut_nominal, sboostedLLMcut_nominal, VBFloose_nominal, s1b1jresolvedMcut_tesUp_DM0, s1b1jresolvedMcut_tesDown_DM0, s2b0jresolvedMcut_tesUp_DM0, s2b0jresolvedMcut_tesDown_DM0, sboostedLLMcut_tesUp_DM0, sboostedLLMcut_tesDown_DM0, VBFloose_tesUp_DM0, VBFloose_tesDown_DM0, s1b1jresolvedMcut_tesUp_DM1, s1b1jresolvedMcut_tesDown_DM1, s2b0jresolvedMcut_tesUp_DM1, s2b0jresolvedMcut_tesDown_DM1, sboostedLLMcut_tesUp_DM1, sboostedLLMcut_tesDown_DM1, VBFloose_tesUp_DM1, VBFloose_tesDown_DM1, s1b1jresolvedMcut_tesUp_DM10, s1b1jresolvedMcut_tesDown_DM10, s2b0jresolvedMcut_tesUp_DM10, s2b0jresolvedMcut_tesDown_DM10, sboostedLLMcut_tesUp_DM10, sboostedLLMcut_tesDown_DM10, VBFloose_tesUp_DM10, VBFloose_tesDown_DM10, s1b1jresolvedMcut_tesUp_DM11, s1b1jresolvedMcut_tesDown_DM11, s2b0jresolvedMcut_tesUp_DM11, s2b0jresolvedMcut_tesDown_DM11, sboostedLLMcut_tesUp_DM11, sboostedLLMcut_tesDown_DM11, VBFloose_tesUp_DM11, VBFloose_tesDown_DM11, s1b1jresolvedMcut_eesUp_DM0, s1b1jresolvedMcut_eesDown_DM0, s2b0jresolvedMcut_eesUp_DM0, s2b0jresolvedMcut_eesDown_DM0, sboostedLLMcut_eesUp_DM0, sboostedLLMcut_eesDown_DM0, VBFloose_eesUp_DM0, VBFloose_eesDown_DM0, s1b1jresolvedMcut_eesUp_DM1, s1b1jresolvedMcut_eesDown_DM1, s2b0jresolvedMcut_eesUp_DM1, s2b0jresolvedMcut_eesDown_DM1, sboostedLLMcut_eesUp_DM1, sboostedLLMcut_eesDown_DM1, VBFloose_eesUp_DM1, VBFloose_eesDown_DM1, s1b1jresolvedMcut_mesUp, s1b1jresolvedMcut_mesDown, s2b0jresolvedMcut_mesUp, s2b0jresolvedMcut_mesDown, sboostedLLMcut_mesUp, sboostedLLMcut_mesDown, VBFloose_mesUp, VBFloose_mesDown, s1b1jresolvedMcut_jesUp_Tot, s1b1jresolvedMcut_jesDown_Tot, s2b0jresolvedMcut_jesUp_Tot, s2b0jresolvedMcut_jesDown_Tot, sboostedLLMcut_jesUp_Tot, sboostedLLMcut_jesDown_Tot, VBFloose_jesUp_Tot, VBFloose_jesDown_Tot, GGFclass_nominal, VBFclass_nominal, ttHclass_nominal, TTlepclass_nominal, TThadclass_nominal, DYclass_nominal,GGFclass_tesUp_DM0, GGFclass_tesDown_DM0, VBFclass_tesUp_DM0, VBFclass_tesDown_DM0, ttHclass_tesUp_DM0, ttHclass_tesDown_DM0, TTlepclass_tesUp_DM0, TTlepclass_tesDown_DM0, TThadclass_tesUp_DM0, TThadclass_tesDown_DM0, DYclass_tesUp_DM0, DYclass_tesDown_DM0, GGFclass_tesUp_DM1, GGFclass_tesDown_DM1, VBFclass_tesUp_DM1, VBFclass_tesDown_DM1, ttHclass_tesUp_DM1, ttHclass_tesDown_DM1, TTlepclass_tesUp_DM1, TTlepclass_tesDown_DM1, TThadclass_tesUp_DM1, TThadclass_tesDown_DM1, DYclass_tesUp_DM1, DYclass_tesDown_DM1, GGFclass_tesUp_DM10, GGFclass_tesDown_DM10, VBFclass_tesUp_DM10, VBFclass_tesDown_DM10, ttHclass_tesUp_DM10, ttHclass_tesDown_DM10, TTlepclass_tesUp_DM10, TTlepclass_tesDown_DM10, TThadclass_tesUp_DM10, TThadclass_tesDown_DM10, DYclass_tesUp_DM10, DYclass_tesDown_DM10, GGFclass_tesUp_DM11, GGFclass_tesDown_DM11, VBFclass_tesUp_DM11, VBFclass_tesDown_DM11, ttHclass_tesUp_DM11, ttHclass_tesDown_DM11, TTlepclass_tesUp_DM11, TTlepclass_tesDown_DM11, TThadclass_tesUp_DM11, TThadclass_tesDown_DM11, DYclass_tesUp_DM11, DYclass_tesDown_DM11, GGFclass_eesUp_DM0, GGFclass_eesDown_DM0, VBFclass_eesUp_DM0, VBFclass_eesDown_DM0, ttHclass_eesUp_DM0, ttHclass_eesDown_DM0, TTlepclass_eesUp_DM0, TTlepclass_eesDown_DM0, TThadclass_eesUp_DM0, TThadclass_eesDown_DM0, DYclass_eesUp_DM0, DYclass_eesDown_DM0, GGFclass_eesUp_DM1, GGFclass_eesDown_DM1, VBFclass_eesUp_DM1, VBFclass_eesDown_DM1, ttHclass_eesUp_DM1, ttHclass_eesDown_DM1, TTlepclass_eesUp_DM1, TTlepclass_eesDown_DM1, TThadclass_eesUp_DM1, TThadclass_eesDown_DM1, DYclass_eesUp_DM1, DYclass_eesDown_DM1, GGFclass_mesUp, GGFclass_mesDown, VBFclass_mesUp, VBFclass_mesDown, ttHclass_mesUp, ttHclass_mesDown, TTlepclass_mesUp, TTlepclass_mesDown, TThadclass_mesUp, TThadclass_mesDown, DYclass_mesUp, DYclass_mesDown, GGFclass_jesUp_Tot, GGFclass_jesDown_Tot, VBFclass_jesUp_Tot, VBFclass_jesDown_Tot, ttHclass_jesUp_Tot, ttHclass_jesDown_Tot, TTlepclass_jesUp_Tot, TTlepclass_jesDown_Tot, TThadclass_jesUp_Tot, TThadclass_jesDown_Tot, DYclass_jesUp_Tot, DYclass_jesDown_Tot
regions    = SR


[configs]
sampleCfg = config/sampleCfg_Legacy2016.cfg
pattern   = goodsystfiles
cutCfg    = config/selectionCfg_MuTau_Legacy2016_syst.cfg


[merge]
#limits
TT        = TTfullyHad, TTfullyLep, TTsemiLep
WJets     = WJets_HT_0_70, WJets_HT_70_100, WJets_HT_100_200, WJets_HT_200_400, WJets_HT_400_600, WJets_HT_600_800, WJets_HT_800_1200, WJets_HT_1200_2500, WJets_HT_2500_Inf
EWK       = EWKWMinus2Jets_WToLNu, EWKWPlus2Jets_WToLNu, EWKZ2Jets_ZToLL
singleT   = TWtop, TWantitop, singleTop_top, singleTop_antitop
ZH        = ZH_HBB_ZLL, ZH_HTauTau
WH        = WplusHTauTau, WminusHTauTau
WW        = WWTo2L2Nu, WWTo4Q, WWToLNuQQ
WZ        = WZTo1L1Nu2Q, WZTo1L3Nu, WZTo2L2Q, WZTo3LNu
ZZ        = ZZTo2L2Nu, ZZTo2L2Q, ZZTo2Q2Nu, ZZTo4L, ZZTo4Q
ttH       = ttHJetTononBB, ttHJetToBB
TTX       = TTZZ, TTWW, TTWZ, TTWJetsToLNu, TTWJetsToQQ, TTZToLLNuNu
ggH       = ggHTauTau
VBFH      = VBFHTauTau
VVV       = WWW, WWZ, WZZ, ZZZ
DY        = DY_LM, DY_HM

data_obs  = DsingleMuB, DsingleMuC, DsingleMuD, DsingleMuE, DsingleMuF, DsingleMuG, DsingleMuH


############################################################################################
############################################################################################
# the following lines are used for postprocessing (pp_), i.e. not read from AnalysisHelper
# but used in subsequent steps of the analysis to combine histos, compute QCD etc..
# we keep them here to have everything at hand

[pp_merge]


## in case some histos must be rebinned. Pass as
## uniqueid = varToRebin , condition, newBinning
# [pp_rebin]
# r1 = HHKin_mass_raw         , sboostedLLMcut , 250, 1000 # a unique, big bin
# r2 = HHKin_mass_raw_tauup   , sboostedLLMcut , 250, 1000 # a unique, big bin
# r3 = HHKin_mass_raw_taudown , sboostedLLMcut , 250, 1000 # a unique, big bin
# r4 = HHKin_mass_raw_jetup   , sboostedLLMcut , 250, 1000 # a unique, big bin
# r5 = HHKin_mass_raw_jetdown , sboostedLLMcut , 250, 1000 # a unique, big bin
#
# r6  = MT2         , sboostedLLMcut , 0, 150, 500 # two bins - the lowest one has small signal
# r7  = MT2_tauup   , sboostedLLMcut , 0, 150, 500 # two bins - the lowest one has small signal
# r8  = MT2_taudown , sboostedLLMcut , 0, 150, 500 # two bins - the lowest one has small signal
# r9  = MT2_jetup   , sboostedLLMcut , 0, 150, 500 # two bins - the lowest one has small signal
# r10 = MT2_jetdown , sboostedLLMcut , 0, 150, 500 # two bins - the lowest one has small signal

## parameters for QCD evaluation
## doFitIf : condition to be respected to make rlx-to-tight QCD fit. It is used as eval(doFitIf). Use names sel, var


[pp_QCD]
#QCDname      = QCD
#SR           = SR
#yieldSB      = SStight
#shapeSB      = SSrlx
#SBtoSRfactor = 1
#regionD = SSinviso
#regionC = OSinviso
#doFitIf      = False
#fitFunc      = [0] + [1]*x


#for inverted QCD
QCDname      = QCD
SR           = SR
yieldSB      = OSinviso
shapeSB      = OSinviso
SBtoSRfactor = 1
doFitIf      = False
fitFunc      = [0] + [1]*x
regionC      = SStight
regionD      = SSinviso


[VBF_rew]
# !WARNING! The input samples MUST be in the order: node1, node2, node3, node4, node5, node19 !
# See the list 'inputSignals' to understand the link node<->couplings
doReweighting = False
inputSignals = VBFHH_CV_1_C2V_1_C3_1, VBFHH_CV_1_C2V_1_C3_0, VBFHH_CV_1_C2V_1_C3_2, VBFHH_CV_1_C2V_2_C3_1, VBFHH_CV_1_5_C2V_1_C3_1, VBFHH_CV_1_C2V_0_C3_2
target_kl  = 1
target_cv  = 0, 1
target_c2v = 1
target_xs = 1 #[pb]
